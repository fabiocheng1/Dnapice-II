from Especie import *
from random import *
import time
import os
from caracteristicas import *



contadorMutacoes  = 0
limiteMaximoGene = 10
tamanhoPopulacao = 10
tamanhoCaracteristica1 = 5
tamanhoCaracteristica2 = 5
tamanhoCaracteristica3 = 5
valorTaxaMutacao = 90 
valorTaxaSelecao = 80
contadorReproducaoFalha = 0
popnewage = []
novaGeracao = []
melhor_valor = 0


def limpar():
    print("digite enter para continuar!")
    input()
    s = os.name
    if s == "nt":
        os.system('cls')
    else:
        os.system('clear')
def limpar2():
    
    s = os.name
    if s == "nt":
        os.system('cls')
    else:
        os.system('clear')


def geracaoIndividuo():
    individuo = Especie("Pan Paniscus",choice(["M","F"])) 

    caracteristica1 = []
    caracteristica2 = []
    caracteristica3 = []    
    

    for i in range(0, tamanhoCaracteristica1): #Caracter√≠stica 1
        caracteristica1 += [randint(1, limiteMaximoGene)]
    individuo.caracteristica1 = caracteristica1

    
    # Caracter√≠stica 2


    for i in range(0, tamanhoCaracteristica2):
            caracteristica2 += [randint(1, limiteMaximoGene)]
            individuo.caracteristica2 = caracteristica2



    #Caracter√≠stica 3

    for i in range(0, tamanhoCaracteristica3):
            caracteristica3 += [randint(1, limiteMaximoGene)]
    individuo.caracteristica3 = caracteristica3





    return individuo




def reproducaoIndividuos(par1, par2):
    individuo = Especie("Bonobo", choice(["M","F"])) #  Acho que pode tirar
    caracteristica1 = []
    caracteristica2 = []
    caracteristica3 = []    

    if par1.sexo != par2.sexo:

        for (i, j) in zip(par1.caracteristica1, par2.caracteristica1):
            caracteristica1 += [max(i, j)]
        individuo.caracteristica1 = caracteristica1 #Caracter√≠stica 1



        # Caracter√≠stica 2

        for (i, j) in zip(par1.caracteristica2, par2.caracteristica2):
            caracteristica2 += [max(i, j)]
        individuo.caracteristica2 = caracteristica2

        #Caracter√≠stica 3

        for (i, j) in zip(par1.caracteristica3, par2.caracteristica3):
            caracteristica3 += [max(i, j)]
        individuo.caracteristica3 = caracteristica3
        
   
        


        return individuo
    
    else: 
        print("ERRO") 
        return None

def mutacaoGenetica(individuo):
    global contadorMutacoes  
    if randint(1, 100) <= valorTaxaMutacao:
        i = randint(0, tamanhoCaracteristica1 - 1)
        individuo.caracteristica1[i] = randint(1, limiteMaximoGene)
        contadorMutacoes += 1 



    if randint(1, 100) <= valorTaxaMutacao:
        i = randint(0, tamanhoCaracteristica2 - 1)
        individuo.caracteristica2[i] = randint(1,limiteMaximoGene)
        contadorMutacoes += 1


    if randint(1, 100) <= valorTaxaMutacao:
        i = randint(0, tamanhoCaracteristica3 - 1)
        individuo.caracteristica3[i] = randint(1, limiteMaximoGene)
        contadorMutacoes += 1
        
    return individuo

def avaliacaoPopulacao(populacao): ######
    melhor_individuo = None
    melhor_valor = float('-inf')

    for individuo in populacao:
        soma_total = (
            sum(individuo.caracteristica1) +
            sum(individuo.caracteristica2) +
            sum(individuo.caracteristica3)
        )

        if soma_total > melhor_valor:
            melhor_valor = soma_total
            melhor_individuo = individuo

    return melhor_individuo, melhor_valor * (valorTaxaSelecao / 100)
    





# ADICIONAR WHILE TRUE COM TRY EXCEPT


limpar()
while True:
    print("Bem vindo ao DNApice-II")

    try:
        print("Escolha uma op√ß√£o:")
        resp = int(input("""
        1 - Sair
        2- Analisar caracter√≠sticas gerais da esp√©cie
        3 - Como funciona o programa?
        4 - Iniciar reprodu√ß√£o
        """))
        limpar2()


        if resp == 1:
            break 
            # C√≥digo da op√ß√£o 1

        elif resp == 2:
            print("""
            Bonobos (Pan paniscus)
                  
                              Vis√£o geral:
                  - Bonobo ou macaco-pigmeu;
                  - Rio Zaire, na Rep√∫blica Democr√°tica do Congo;
                  - Pacif√≠cos e altamente sociais;
                  - Comportamento sexual;
                  - Disponibilidade de plantas.

                              Reprodu√ß√£o:
                  - As f√™meas t√™m ciclos estrais e entram em cio ativo;
                  - Gesta√ß√£o dura cerca de 8 meses;
                  - Rela√ß√µes hetereossexuais e homossexuais;
                  - resolvem conflitos; Fortalecimento de la√ßos sociais; 
                    Reduzir o estresse.
                  
                              Curiosidades:
                  - 98,7% do DNA igual ao dos humanos;
                  - Comunidade matriaracal;
                  - Brincal√µes e inteligentes;
                  - Empatia -> Compartilha alimento;
                  - Risco de extin√ß√£o;
                  - Automedica√ß√£o -> Zoofarmacognosia.


""")
            limpar()
            # C√≥digo da op√ß√£o 2
        
        elif resp == 3:
            print(""" üß¨ O DNApice-II √© um programa que simula, de forma bem simplificada, o processo de reprodu√ß√£o e evolu√ß√£o gen√©tica de uma esp√©cie fict√≠cia chamada 
                    Pan Paniscus (o nome cient√≠fico do bonobo, um tipo de macaco). 
                    Ele cria uma pequena popula√ß√£o de indiv√≠duos, cada um com suas caracter√≠sticas gen√©ticas, 
                    e depois faz com que eles se reproduzam, gerando novos indiv√≠duos com mistura dos genes dos ‚Äúpais‚Äù. 
                    Durante esse processo, o programa tamb√©m simula a muta√ß√£o gen√©tica, ou seja, 
                    pequenas mudan√ßas aleat√≥rias que podem acontecer no DNA de um indiv√≠duo ‚Äî o que imita o que ocorre na natureza.

            ‚öô Etapas principais do programa

                1- Cria√ß√£o dos indiv√≠duos iniciais
                    O programa gera uma popula√ß√£o com alguns indiv√≠duos.
                    Cada um tem:
                    Um nome cient√≠fico (‚ÄúPan Paniscus‚Äù);
                    Um sexo (masculino ou feminino, escolhido aleatoriamente);
                    Um conjunto de caracter√≠sticas gen√©ticas (n√∫meros que representam ‚Äúgenes‚Äù).

                2-Reprodu√ß√£o
                    O programa tenta formar pares de indiv√≠duos de sexos diferentes.
                    Cada par ‚Äúgera um novo indiv√≠duo‚Äù, combinando os genes dos pais ‚Äî 
                    geralmente escolhendo o melhor gene de cada par (como se pegasse o mais forte de cada um).

                3-Muta√ß√£o gen√©tica
                    √Äs vezes (com uma certa chance), 
                    um dos genes do novo indiv√≠duo muda para outro n√∫mero aleat√≥rio ‚Äî 
                    isso representa uma muta√ß√£o, que pode deixar o novo indiv√≠duo mais ou menos adaptado.
                    Avalia√ß√£o dos indiv√≠duos
                    O programa soma os valores dos genes de cada indiv√≠duo para medir quem √© o mais adaptado (ou mais forte).
                    S√≥ os novos indiv√≠duos com caracter√≠sticas boas o suficiente s√£o considerados selecionados para continuar.

                4-Relat√≥rios e estat√≠sticas
                    Depois da simula√ß√£o, o usu√°rio pode escolher o que quer ver:
                    Os indiv√≠duos selecionados (os ‚Äúmelhores‚Äù);
                    Quantas tentativas de reprodu√ß√£o falharam (pares do mesmo sexo, por exemplo);
                    Quantas muta√ß√µes gen√©ticas aconteceram;
                    Ou a lista da popula√ß√£o inicial.

                üí° Em resumo
                    O DNApice-II √© uma simula√ß√£o simples de evolu√ß√£o biol√≥gica.
                    Ele mostra como reprodu√ß√£o, sele√ß√£o natural e muta√ß√£o gen√©tica podem mudar uma popula√ß√£o ao longo do tempo, 
                  
                    mesmo que de forma bem simb√≥lica e usando n√∫meros em vez¬†de¬†DNA¬†real.  

        """)
            limpar()

        elif resp == 4:

            tamanhoPopulacao = int(input("Qual ser√° o tamanho da popula√ß√£o inicial?"))
            tamanhoPopNewAge = int(input("Quantos indiv√≠duos poder√£o fazer parte dos selecionados?"))
            limpar2()

            if tamanhoPopNewAge > tamanhoPopulacao:
                print("ERRO! O N√öMERO DE INDIV√çDUOS SELECIONADOS N√ÉO PODE SER MAIOR QUE A POPULA√á√ÉO TOTAL")
                limpar()
                break


            populacao = [geracaoIndividuo() for i in range(0, tamanhoPopulacao)]

            
            
            
          
            for i in range(0, len(populacao) - 1):
                par1 = populacao[i]
                par2 = populacao[i + 1]

                if par1.sexo != par2.sexo:
                    ind3 = reproducaoIndividuos(par1, par2)
                    ind3 = mutacaoGenetica(ind3)

                    valor_ind3 = sum(ind3.caracteristica1) + sum(ind3.caracteristica2) + sum(ind3.caracteristica3)
                    

        
                    if valor_ind3 >= melhor_valor and len(popnewage) < tamanhoPopNewAge:
                        popnewage.append(ind3)
                else:
                    contadorReproducaoFalha += 1

            while True:
                    try:
                        print("Escolha uma op√ß√£o:")
                        resp2 = int(input("""
                        1 - Mostrar indiv√≠duos selecionados
                        2 - Mostrar n√∫mero de reprodu√ß√µes falhas
                        3 - Mostrar o n√∫mero de muta√ß√µes gen√©ticas que ocorreram em toda a popula√ß√£o
                        4 - Mostrar a popula√ß√£o inicial
                        6- Taxa de manuten√ß√£o gen√©tica
                        5- Sair                     """))
                        limpar2()
                    
                        if resp2 == 1:
                            
                            if len(popnewage) == 0:
                                print("Nenhum indiv√≠duo sobreviveu")

                            else:

                                for individuo in popnewage:
                                    # Adicionar mais dois para as outras caracter√≠sticas
                                    print(f"{individuo.nomeCientifico} - {individuo.sexo}")
                                    print(f"Caracter√≠stica 1: {individuo.caracteristica1}")
                                    print(f"Por isso, a cor do seu olho √© {c1[individuo.caracteristica1[0]]}")

                                    print(f"Caracter√≠stica 2: {individuo.caracteristica2}")
                                    print(f"Por isso, seu comportamento √© {c2[individuo.caracteristica2[0]]}")

                                    print(f"Caracter√≠stica 3: {individuo.caracteristica3}")
                                    print(f"Por isso, a cor do seu pelo √© {c3[individuo.caracteristica3[0]]}")

                                limpar()
                        
                        elif resp2 == 2:
                            print(f"O n√∫mero de reprodu√ß√µes que falharam foi: {contadorReproducaoFalha}")

                            limpar()
                        elif resp2 == 3:
                            print(f"O n√∫mero de muta√ß√µes que ocorreram foi: {contadorMutacoes}")
                            limpar()

                        elif resp2 == 4:
                            for individuo in populacao:
                                # Adicionar mais dois para as outras caracter√≠sticas
                                    print(f"{individuo.nomeCientifico} - {individuo.sexo}")
                                    print(f"Caracter√≠stica 1: {individuo.caracteristica1}")
                                    print(f"Por isso, a cor do seu olho √© {c1[individuo.caracteristica1[0]]}")

                                    print(f"Caracter√≠stica 2: {individuo.caracteristica2}")
                                    print(f"Por isso, seu comportamento √© {c2[individuo.caracteristica2[0]]}")

                                    print(f"Caracter√≠stica 3: {individuo.caracteristica3}")
                                    print(f"Por isso, a cor do seu pelo √© {c3[individuo.caracteristica3[0]]}")
                                
                                    print()
                                    limpar()
                        elif resp2 == 5:
                            print("Saindo...")
                            time.sleep(2)
                            limpar2()
                            break

                        
                            
                        elif resp2 == 6:
    
                            if not popnewage or not populacao:
                                print("Erro: √â necess√°rio ter uma popula√ß√£o e uma nova gera√ß√£o para calcular a taxa gen√©tica.")
                                limpar()
                            else:
                                genes_mantidos1 = genes_totais1 = 0
                                genes_mantidos2 = genes_totais2 = 0
                                genes_mantidos3 = genes_totais3 = 0

                                # Compara indiv√≠duo a indiv√≠duo entre as gera√ß√µes
                                for i in range(min(len(popnewage), len(populacao))):
                                    filho = popnewage[i]
                                    pai = populacao[i]  # Supondo correspond√™ncia de √≠ndice (mesmo "n√∫mero" de indiv√≠duo)

                                    # Caracter√≠stica 1
                                    for g1, g2 in zip(filho.caracteristica1, pai.caracteristica1):
                                        genes_totais1 += 1
                                        if g1 == g2:
                                            genes_mantidos1 += 1

                                    # Caracter√≠stica 2
                                    for g1, g2 in zip(filho.caracteristica2, pai.caracteristica2):
                                        genes_totais2 += 1
                                        if g1 == g2:
                                            genes_mantidos2 += 1

                                    # Caracter√≠stica 3
                                    for g1, g2 in zip(filho.caracteristica3, pai.caracteristica3):
                                        genes_totais3 += 1
                                        if g1 == g2:
                                            genes_mantidos3 += 1

                                # Exibi√ß√£o dos resultados
                                if genes_totais1 > 0:
                                    porcentagem = (genes_mantidos1 / genes_totais1) * 100
                                    print(f"{porcentagem:.2f}% dos genes se mantiveram entre as gera√ß√µes na caracter√≠stica 1.")
                                    limpar()
                                else:
                                    print("Nenhum gene foi mantido na caracter√≠stica 1.")
                                    limpar()

                                if genes_totais2 > 0:
                                    porcentagem = (genes_mantidos2 / genes_totais2) * 100
                                    print(f"{porcentagem:.2f}% dos genes se mantiveram entre as gera√ß√µes na caracter√≠stica 2.")
                                    limpar()
                                else:
                                    print("Nenhum gene foi mantido na caracter√≠stica 2.")
                                    limpar()

                                if genes_totais3 > 0:
                                    porcentagem = (genes_mantidos3 / genes_totais3) * 100
                                    print(f"{porcentagem:.2f}% dos genes se mantiveram entre as gera√ß√µes na caracter√≠stica 3.")
                                    limpar()
                                else:
                                    print("Nenhum gene foi mantido na caracter√≠stica 3.")
                                    limpar()
                                    


                            

                        else:
                            print("Erro, op√ß√£o inv√°lida")
                            limpar()



                    except ValueError:
                        print("Erro: Digite um n√∫mero v√°lido")
                        print("Limpando a tela...")
                        time.sleep(3)
                        limpar2()
                        # Ser√° que seria melhor usar um input() vazio para limpar a tela?
                        
                        # Verificar o sistema operacional para apagar


        else:  
            print("Erro, op√ß√£o inv√°lida")
            limpar()           
                    
                    


                

        # Mudei aqui pq n√£o fazia sentido verificar se ind3 era diferente de nulo mais uma vez, por isso adicionei logo ap√≥s a reprodu√ß√£o
        
        # C√≥digo da op√ß√£o 4



    except ValueError:
        print("Erro: Digite um n√∫mero v√°lido")
        print("Limpando a tela...")
        time.sleep(3)
        limpar2()

    

        
            



        
    # FRU FRU PARA O CLIENTE, COLOCAR TIPO: ESP√âCIES COISAS
   

    # OUTRO FRU FRU PARA ESP√âCIES SUPER DESENVOLVIDAS
    

    


